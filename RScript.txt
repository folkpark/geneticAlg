> setwd("C:/Users/pfolkman/Desktop/bank")
> bankData <- read.csv(file="bank-full.csv",head=TRUE, sep = ";")
> install.packages("BBmisc")
> library(BBmisc)
> install.packages("class")
> library(gmodels)
> library(class)
> TP <- 0
> TN <- 0
> FP <- 0
> FN <- 0
> MCC_func <- function(TP,TN,FP,FN){
+ numerator <- (TP*TN - FP*FN)
+ denom <- 1
+     if((TP+FP != 0) & (TP+FN != 0) & (TN+FP != 0) & (TN+FN != 0)){
+         denom <- sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
+     }
+ return(numerator/denom)}
> bankData_numeric <- matrix(unlist(bankData), ncol = 17, nrow = 45211)
> colnames(bankData_numeric) <- c("age","job","Maritial Status","Education","has Credit?","balance (Euros)","Home loan?","Personal Loan?","Comm type","Day","Month","Duration","Campaign","pdays","previous","poutcome","y or n")
> bankData_numeric_df <- as.data.frame(bankData_numeric)
> randSelection <- function(num_of_attributes){
+     vector <- vector()
+     vector <- c(vector,round(runif(num_of_attributes,min=0,max=1)))
+     return(vector)}
> normalizeData <- function(x){
+ numer <- x - min(x)
+ denom <- max(x) - min(x)
+ return(numer/denom)}
> bankData_norm_df <- as.data.frame(lapply(bankData_numeric_df[1:17],normalizeData))
> trainingData_df  <- bankData_norm_df[1:36000,]
> testData_df <- bankData_norm_df[36001:nrow(bankData_norm_df),]
> trainingData_label <- bankData_numeric[1:36000,17]
> testData_label <- bankData_numeric[36001:nrow(bankData_norm_df),17]
> knnresult <- knn(train = trainingData_df, test = testData_df, cl = trainingData_label,k=50)
> CrossTable(x = testData_label, y = knnresult,prop.chisq = FALSE)
> bankData_norm_matrix <- as.matrix(bankData_norm_df)
> testData_matrix <- as.matrix(testData_df)
> trainingData_matrix <- as.matrix(trainingData_df)
> getPrediction_test <- function(pred){
+     tempList <- c()
+     for(i in 1:16){
+         if(pred[i] == 1){
+             tempList <- c(tempList,i)
+         }
+     }
+     tempList <- c(tempList,17)
+     return(as.data.frame(testData_matrix[,tempList]))
+ }
> getPrediction_train <- function(pred){
+     tempList <- c()
+     for(i in 1:16){
+         if(pred[i] == 1){
+             tempList <- c(tempList,i)
+         }
+     }
+     tempList <- c(tempList,17)
+     return(as.data.frame(trainingData_matrix[,tempList]))
+ }