h <- c()
a <- c()
a[[1]] <- c(1,1,1)
hMax <- 0
aMax <- 0
for (i in 1:30) {
hTemp <- A %*% a[[1]]
hMax <- max(hTemp)
h[[i+1]] <- hTemp/hMax
}
hMax
h <- c()
a <- c()
a[[1]] <- c(1,1,1)
hMax <- 0
aMax <- 0
for (i in 1:30) {
hTemp <- A %*% a[[1]]
hMax <- max(hTemp)
print(hMax)
h[[i+1]] <- hTemp/hMax
}
hTemp
h
rm(aMax)
rm(hMax)
rm(i)
rm(hTemp)
rm(h)
rm(a)
h <- c()
a <- c()
a[[1]] <- c(1,1,1)
hMax <- 0
aMax <- 0
for (i in 1:30) {
hTemp <- A %*% a[[i]]
hMax <- max(hTemp)
h[[i]] <- hTemp/hMax
aTemp <- At %*% h[[i]]
aMax <- max(aTemp)
a[[i+1]] <- aTemp/aMax
}
aTemp
hTemp
h
rm(aMax)
rm(a=hMax)
rm(i)
rm(hTemp,h,a,aTemp)
h <- c()
a <- c()
a[[1]] <- c(1,1,1)
hMax <- c()
aMax <- c()
for (i in 1:30) {
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
aTemp <- At %*% h[[i]]
aMax[[i]] <- max(aTemp)
a[[i+1]] <- aTemp/aMax[[i]]
}
aMax
hMax
a[[i]]
h[[i]]
a[[i+1]]
a[[i+2]]
h[[i+1]]
mbTest <- matrix(
c(6.6,7.1,4.9,5),
nrow=4,
ncol=1)
mean(mbTest)
sd(mbTest)
var(mbTest)
rm(list = ls())
A <- matrix(
c(0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0),
nrow=5,
ncol=5)
a
A
At <- t(A)
A <- matrix(
c(0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0),
nrow=5,
ncol=5)
At <- t(A)
h <- c()
a <- c()
a[[1]] <- c(1,1,1,1,1)
hMax <- c()
aMax <- c()
for (i in 1:30) {
+     hTemp <- A %*% a[[i]]
+     hMax[[i]] <- max(hTemp)
+     h[[i]] <- hTemp/hMax[[i]]
+
+     aTemp <- At %*% h[[i]]
+     aMax[[i]] <- max(aTemp)
+     a[[i+1]] <- aTemp/aMax[[i]]
}
hTemp <- 0
for (i in 1:30) {
+     hTemp <- A %*% a[[i]]
+     hMax[[i]] <- max(hTemp)
+     h[[i]] <- hTemp/hMax[[i]]
+
+     aTemp <- At %*% h[[i]]
+     aMax[[i]] <- max(aTemp)
+     a[[i+1]] <- aTemp/aMax[[i]]
}
rm(hTemp)
for (i in 1:30) {
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
}
rm(hTemp)
rm(i)
for (i in 1:30) {
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
aTemp <- At %*% h[[i]]
aMax[[i]] <- max(aTemp)
a[[i+1]] <- aTemp/aMax[[i]]
}
aMax
hMax
h[[i]]
a[[i+1]]
round(h[[i]], digits=4)
round(a[[i+1]], digits=4)
rm(list = ls())
url <- 'http://www.dataminingbook.info/pmwiki.php/Main/GraphAnalysis?action=download&upname=Ecoli.txt'
rm(url)
library(igraph)
install.packages("igraph")
library(igraph)
url <- 'http://www.dataminingbook.info/pmwiki.php/Main/GraphAnalysis?action=download&upname=Ecoli.txt'
read.graph(url)
ecoli <- read.graph(url)
ecoli
degree(ecoli)
degree(ecoli, v = 1)
degree(ecoli, v = 2)
eccen <- eccentricity(ecoli)
diam <- max(eccen)
diam
transitivity(ecoli)
degree_distribution(ecoli)
ecoliDegree <- degree(ecoli)
ecoliDegree
degDist <- degree_distribution(ecoli)
plot( degDist ~ ecoliDegree)
plot( degDist, ecoliDegree)
logDeg <- log(degDist)
logDist <- log(degDist)
logDeg <- log(ecoliDegree)
plot( logDist, logDeg)
plot( degDist ~ logDeg)
plot(ecoli)
rm(logDeg)
rm(logDist)
degDist <- degree.distribution(ecoli,cumulative = FALSE)
library(poweRlaw)
install.packages(poweRlaw)
install.packages(poweRlaw)
hist(ecoliDegree)
degDist <- degree.distribution(ecoli,mode ="all", cumulative = FALSE )
prob <- degDist[-1]
nonzero.position <- which(prob != 0)
prob <- prob[nonzero.position]
ecoliDegree <- 1:max(ecoliDegree)
ecoliDegree <- ecoliDegree[nonzero.position]
plot(prob ~ ecoliDegree, log = "xy")
plot(degDist)
plot(degree(ecoli))
plot(degree(ecoli), log="xy")
ecoliDegree <- degree(ecoli)
ecoliDegree <- 1:max[degDist]
ecoliDegree <- 1:max(degDist)
plot(ecoli/sum(ecoli))
sumE <- sum(ecoli)
p <- c()
for (i in 1:max(ecoliDeg)) {
P[i] = length(ecoliDeg[ecoliDeg >= i]) / length(ecoliDeg);
}
for (i in 1:max(ecoliDegree)) {
P[i] = length(ecoliDegree[ecoliDegree >= i]) / length(ecoliDegree);
}
for (i in 1:max(ecoliDegree)) {
p[i] = length(ecoliDegree[ecoliDegree >= i]) / length(ecoliDegree);
}
plot(1:max(ecoliDegree), p, log="xy", type = "l", xlab="Degree", ylab="CCDF")
testEcoli <- ecoli
testEcoli$setXmin(est_pl)
degDist <- degree.distribution(ecoli)
plot(degDist, xlab="degree", ylab="frequency")
typeof(degDist)
degDist <- degDist[3:max(degDist)]
plot(degDist, xlab="degree", ylab="frequency")
degDist <- degree.distribution(ecoli)
degDist <- degDist[-3]
plot(degDist, xlab="degree", ylab="frequency")
degDist <- degree.distribution(ecoli)
degDist <- degDist[-1]
degDist <- degDist[-1]
degDist <- degDist[-1]
degDist <- degDist[-1]
plot(degDist, xlab="degree", ylab="frequency")
plot(degDist, xlab="degree", ylab="frequency", log = "xy")
degDist <- degree.distribution(ecoli)
hist(degDist,breaks=0.001)
hist(degDist,breaks=1)
hist(degDist)
degDist <- degDist[-1]
degDist <- degDist[-1]
degDist <- degDist[-1]
hist(degDist)
hist(degDist, breaks=500)
h <- hist(degDist)
x <- h$mids
y <- h$density
plot(x,y,log="xy",pch=16,type="p",cex=2,col="steelblue3",xlab="",ylab="",las=1,xaxt="n",yaxt="n"))
plot(x,y,log="xy",pch=16,type="p",cex=2,col="steelblue3",xlab="",ylab="",las=1,xaxt="n",yaxt="n")
plot(degree.distribution(ecoli))
plot(degree.distribution(ecoli), log = "xy")
lm(degree.distribution(ecoli), data=ecoli)
lm(degree.distribution(ecoli))
abline(2)
transitivity(ecoli, type = "undirected")
qchisq(0.4, df=2)
qchisq(2, df=2)
qchisq(1.01, df=2)
pchisq(0.4, df=2)
dchisq(0.4, df=2)
chisq.test(1.83258, df=2)
chisq.test(1.83258)
pchisq(0.4, df=8)
d <- seq(1:50)
d
d <- seq(1:50)
unit.hypersphere.volume(5)
library(dissUtils)
vol_func <- function(d) {
if((d %% 2) == 0){
}}
rm(vol_func())
rm(vol_func)
vol_func <- function(d) {
numerator <- pi^(d/2)
denom <- gamma((d/2)+1)
volume <- numerator/denom
return(volume)}
volList <- c()
for(i in d){
volList[[i]] <- vol_func(i)}
plot(d,volList)
plot(d,volList, xlab = "d", ylab = "Vol(S_d(1))", main = "Volume of unit HyperSphere by Dimension")
rm(i)
rm(d)
d <- seq(1:100)
rad_func <- function(d){
q <- pi^(-d/2)gamma((d/2)+1)
rad_func <- function(d){
q <- pi^(-d/2)
p <- gamma((d/2)+1)
tempRad <- (q*p)^(-1/d)
return(tempRad)}
for(i in d){
}
rm(i)
radList <- c()
for(i in d){
radList[[i]] <- rad_func(i)}
plot(d,radList)
plot(d,radList, ylab = "radius", main = "Radius value in higher dimensions")
library(datasets)
data("iris")
View(iris)
3dMatrix <- matrix(iris$Sepal.Length, iris$Petal.Length, iris$Petal.Width)
matrixOne <- matrix(iris$Sepal.Length, iris$Petal.Length, iris$Petal.Width)
View(matrixOne)
matrixOne <- matrix(iris$Sepal.Length, iris$Petal.Length, iris$Petal.Width, ncol = 3)
type(iris)
typeof(iris)
matrixOne <- as.matrix(iris$Sepal.Length,iris$Petal.Length,iris$Petal.Width)
matrixOne <- as.matrix(iris$Sepal.Length,iris$Petal.Length,iris$Petal.Width, ncol = 4)
matrixOne <- as.matrix(iris$Sepal.Length,iris$Petal.Length,iris$Petal.Width, ncol = 3)
View(matrixOne)
matrixOne <- as.matrix(iris)
myMatrix <- matrix(
c(iris$Sepal.Length,iris$Petal.Length,iris$Petal.Width),
ncol = 3,
nrow = 150)
View(myMatrix)
View(iris)
rm(matrixOne)
myMatrix <- scale(myMatrix, center = TRUE, scale = FALSE)
View(myMatrix)
U <- matrix(
c(1,0,0,0,sqrt(3)/2,1/2,0,-1/2,sqrt(3)/2),
ncol = 3,
nrow = 3)
U
Utrans <- t(U)
Utrans
Uinv <- inv(U)
v <- myMatrix[5]
v
v <- c(-0.8433333, -2.358,-0.9993333)
rm(v)
v1 <- matrix(
c(2/3,2/3,1/3),
ncol = 1,
nrow = 3)
v2 <- matrix(
c(-4/(5)^-3,5/(5)^-3, -2/(5)^-3),
ncol = 1,
nrow = 3)
v2
v2 <- matrix(
c(-4/5^(1/3),5/5^(1/3), -2/5^(1/3)),
ncol = 1,
nrow = 3)
-2.467333*v1
v2
myMatrix$V1
myMatrix[1]
myMatrix[,1]
library(plot3D)
library(plotly)
install(plot3D)
install.packages(plot3D)
library(plot3D)
install.packages("plot3D")
library(plot3D)
plot3d(myMatrix[,1],myMatrix[,2],myMatrix[,3])
plot3D::scatter3D(myMatrix[,1],myMatrix[,2],myMatrix[,3])
plot3D::scatter3D(myMatrix[,1],myMatrix[,2],myMatrix[,3],xlab = "TESTx")
plot3D::scatter3D(myMatrix[,1],myMatrix[,2],myMatrix[,3],xlab = "Sepal Length", ylab = "Petal Length", zlab = "Petal Width")
planes3D(1,1,1)
planes3d(1,1,1)
x <- myMatrix[,1]
y <- myMatrix[,2]
z <- myMatrix[,3]
fit <- lm(z ~ x + y)
x.pred <- seq(min(x), max(x), length.out = 6)
y.pred <- seq(min(y), max(y), length.out = 6)
xy <- expand.grid( x = x.pred, y = y.pred)
z.pred <- matrix(predict(fit, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
z.pred <- matrix(predict(fit, newdata = xy), nrow = grid.lines, ncol = grid.lines)
z.pred <- matrix(predict(fit, newdata = xy), nrow = 6, ncol = 6)
fitpoints <- predict(fit)
scatter3D(x, y, z,
xlab = "Sepal Length", ylab = "Petal Length", zlab = "Petal Width",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = NA, fit = fitpoints), main = "2D Projection")
rm(list = ls())
D < - matrix(
c(8,0,10,10,2,-20,-1,-19,-20,0),
ncol = 2,
nrow = 5)
D < - matrix(
c(8,0,10,10,2,-20,-1,-19,-20,0),
nrow = 5,
ncol = 2)
D <- matrix(
c(8,0,10,10,2,-20,-1,-19,-20,0),
nrow = 5,
ncol = 2)
mean(D)
x1 <- c(8,0,10,10,2)
x2 <- c(-20,-1,-19,-20,0)
mean(x1,x2)
mean(x1)
mean(x2)
cov(D)
var(D)
D <- matrix(
c(8,0,10,10,2,-20,-1,-19,20,0),
nrow = 5,
ncol = 2)
D
var(D)
1.5154+130.98/var(D)
rm(list = ls())
url <- 'http://www.dataminingbook.info/pmwiki.php/Main/PrincipalComponentAnalysis?action=download&upname=magic04.txt'
magicTable <- read.table(url, sep = ',')
magicMatrix <- as.matrix(magicTable)
magicMatrix <- magicMatrix[1:10]
covMatrix <- cov(magicMatrix)
cov(magicMatrix)
magicMatrix
magicMatrix <- as.matrix(magicTable)
magicMatrix
magicMatrix <- magicMatrix[,-11]
View(magicMatrix)
covMatrix <- cov(magicMatrix)
magicMatrix
sapply(magicMatrix, as.numeric)
magicMatrix <- sapply(magicMatrix, as.numeric)
covMatrix <- cov(magicMatrix)
eigen(magicMatrix)
Z <- scale(magicMatrix, center = TRUE, scale = FALSE)
cov(Z)
rm(Z)
url <- ’http://www.dataminingbook.info/pmwiki.php/Main/NumericDataAnalysis?action=download&upname=magic04.txt’
cov(magicTable)
cov(magicMatrix)
typeof(magicMatrix)
typeof(magicTable)
sapply(magicTable[1:10], mean)
magicMatrix <- as.matrix(magicTable)
dim(magicMatrix)
tempTable <- magicTable[1:10]
magicMatrix <- as.matrix(tempTable)
cov(magicMatrix)
covMatrix <- cov(magicMatrix)
A <- covMatrix
At <- t(A)
h <- c()
a <- c()
a[[1]] <- c(1,1,1,1,1,1,1,1,1,1)
hMax <- c()
aMax <- c()
for (i in 1:30){
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
}
i <- 0
rm(i)
for (i in 1:30){
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
aTemp <- At %*%
aMax[[i]] <- max(aTemp)
a[[i+1]] <- aTemp/aMax[[i]]
}
> for (i in 1:30){
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
aTemp <- At %*% h[[i]]
aMax[[i]] <- max(aTemp)
a[[i+1]] <- aTemp/aMax[[i]]
}
for (i in 1:30){
hTemp <- A %*% a[[i]]
hMax[[i]] <- max(hTemp)
h[[i]] <- hTemp/hMax[[i]]
aTemp <- At %*% h[[i]]
aMax[[i]] <- max(aTemp)
a[[i+1]] <- aTemp/aMax[[i]]
}
aMax
eigen(A)
max(eigen(A))
eigen(A)
eigen <- eigen(A)
eigenValues <- eigen$values
eigenVectors <- eigen$vectors
pca <- prcomp(A, scale. = TRUE)
pca
rotations <-  pca$rotation
typeof(rotation)
typeof(rotations)
View(rotations)
pca1 <- rotations[,1]
pca1
rm(pca1)
pca1 <- rotations[1,]
pca1
PC1 <- rotations$PC1
rotations$V1
PC1 <- rotations[,-2:-10]
PC1
View(PC1)
plot(eigenValues, PC1)
plot(eigenValues, PC1, type = "l", xlab = "EigenValues", main = "Variance captured by EigenValue")
plot(eigenValues, PC1, xlab = "EigenValues", main = "Variance captured by EigenValue for PC1")
plot(eigenValues, PC1, xlab = "EigenValues", main = "Variance by EigenValue for PC1")
plot(eigenValues, rotations)
list <- [10:1]
list <- [1:10]
totalVar <- Reduce("+", eigenValues)
eigenValueNumber <- c(1,2,3,4,5,6,7,8,9,10)
y <- c()
for(i in 1:10){
}
rm(i)
tempSum <- 0
for(i in 1:10){
tempSum <- tempSum + (eigenValues[i]/totalVar)
y[[i]] <- tempSum
}
y
plot(eigenValueNumber, y)
plot(eigenValueNumber, y, ylab = "Percent of Variance captured", xlab = "EgienValue i", main = "Variance captured by EigenValue")
plot(eigenValueNumber, y, ylab = "Percent of Variance captured", xlab = "EgienValue i", main = "Percent of Variance captured by EigenValue")
plot(eigenValueNumber, y, ylab = "Percent of Variance captured", xlab = "EgienValue i", main = "Percent of Variance captured by EigenValue", type = "l")
bankData <- read.csv(file="bank-full.csv",head=TRUE, sep = ";")
setwd("C:/Users/pfolkman/Desktop/bank")
bankData <- read.csv(file="bank-full.csv",head=TRUE, sep = ";")
View(bankData)
save.image("C:/Users/pfolkman/Desktop/bank/DataMiningWorkspace.RData")
